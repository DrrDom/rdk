__author__ = 'pavel'

import os
import sys
import gzip
import pickle
from rdkit import Chem
from rdkit.Chem.PropertyMol import PropertyMol


def read_pkl(fname):
    with open(fname, 'rb') as f:
        while True:
            try:
                yield pickle.load(f)
            except EOFError:
                break


def read_sdf(fname, id_field_name=None):
    if fname.lower().endswith('.sdf'):
        suppl = Chem.SDMolSupplier(fname)
    elif fname.lower().endswith('.sdf.gz'):
        suppl = Chem.ForwardSDMolSupplier(gzip.open(fname))
    else:
        return
    for mol in suppl:
        if mol is not None:
            if id_field_name is not None:
                mol_title = mol.GetProp(id_field_name)
            else:
                if mol.GetProp("_Name"):
                    mol_title = mol.GetProp("_Name")
                else:
                    mol_title = Chem.MolToSmiles(mol, isomericSmiles=True)
            yield PropertyMol(mol), mol_title


def read_smiles(fname):
    with open(fname) as f:
        for line in f:
            tmp = line.strip().split()
            mol = Chem.MolFromSmiles(tmp[0])
            if mol is not None:
                if len(tmp) > 1:
                    mol_title = tmp[1]
                else:
                    mol_title = Chem.MolToSmiles(mol, isomericSmiles=True)
                yield mol, mol_title


def read_stdin_smiles():
    line = sys.stdin.readline()
    while line:
        tmp = line.strip().split()
        mol = Chem.MolFromSmiles(tmp[0])
        if mol is not None:
                if len(tmp) > 1:
                    mol_title = tmp[1]
                else:
                    mol_title = Chem.MolToSmiles(mol, isomericSmiles=True)
                yield mol, mol_title
        line = sys.stdin.readline()


def read_stdin_sdf():
    molblock = ''
    line = sys.stdin.readline()
    i = 1
    while line:
        if line != '$$$$\n':
            molblock += line
        else:
            mol = Chem.MolFromMolBlock(molblock)
            mol_title = molblock.split('\n', 1)[0]
            if not mol_title:
                mol_title = 'autogenerated_id_%i' % i
            yield PropertyMol(mol), mol_title
            molblock = ''
            i += 1
        line = sys.stdin.readline()


def read_input(fname, id_field_name=None, stdin_format=None):
    if fname is None:
        if stdin_format == 'smi':
            suppl = read_stdin_smiles()
        elif stdin_format == 'sdf':
            suppl = read_stdin_sdf()
        else:
            raise Exception("Cannot read STDIN. STDIN format should be specified explicitly: smi or sdf.")
    elif fname.lower().endswith('.sdf') or fname.lower().endswith('.sdf.gz'):
        suppl = read_sdf(os.path.abspath(fname), id_field_name=id_field_name)
    elif fname.lower().endswith('.smi') or fname.lower().endswith('.smiles'):
        suppl = read_smiles(os.path.abspath(fname))
    elif fname.lower().endswith('.pkl'):
        suppl = read_pkl(os.path.abspath(fname))
    else:
        raise Exception("File extension can be only SDF, SMI or SMILES")
    for mol, mol_name in suppl:
        yield mol, mol_name
